psr3 

1 Especificação 

1.1 Básicos

A LoggerInterface expõem oite métodos para escrever os logos com base na nos 8 RFC 5424 níveis (debug, info, notice, warning, error, critical, alert, emergency). 

O método 9 é o log, aceita um log no primeiro argumento. A chamada desse método com um nível constante deve ter o mesmo resultado como chamada de métodos para os níveis específicos. 
A chamada desse método com um nível que não deve lançar um Psr\Log\InvalidArgumentException se a implementação não souber sobre o nível. Usar SHOULD NOT usa um nível de custo sem saber para ao certo a a atual implementação que suporta isso. 

1.2 Mensagem 

Todo método aceita uma string como mensagem, ou um objeto com o método mágico __toString(). Os implementadores podem realizar uma dada manipulação para o passado dos objetos. Se não for o caso, a implementação deve lança-los 
a uma string. 

A mensagem pode conter placeholders cujos implementadores podem substituir com valor de um vetor de contexto.  

O nome dos placeholders deve corresponder a chave no array de contexto. 

Placehoders deve ser delimiados com uma simples abertura de { e um 
fechamento de }. Não deve haver nenhum espaço em branco entre os delimitadores em que tenha o nome do placeholder. 

O nome dos placeholders deve ser composto apenas por caracteres A-Z, a-z, 0-9, _, e . . O uso de outros caracteres está definido para futuras modificações na especificação dos placeholders. 
Os implementadores podem usar placeholders para implementar vários escalonamentos estratégicos e apresentar os logs no monitor. Usuários não devem pre-escapar os valores do placeholder desde que eles não possam saber em qual contexto o dado seja impresso. 

A seguir um exemplo de implementação de interpolação de placeholder sendo provido para finalidades de referências apenas; 


<?php

/**
 * Interpolates context values into the message placeholders.
 */
function interpolate($message, array $context = array())
{
    // build a replacement array with braces around the context keys
    $replace = array();
    foreach ($context as $key => $val) {
        // check that the value can be casted to string
        if (!is_array($val) && (!is_object($val) || method_exists($val, '__toString'))) {
            $replace['{' . $key . '}'] = $val;
        }
    }

    // interpolate replacement values into the message and return
    return strtr($message, $replace);
}

// a message with brace-delimited placeholder names
$message = "User {username} created";

// a context array of placeholder names => replacement values
$context = array('username' => 'bolivar');

// echoes "User bolivar created"
echo interpolate($message, $context);

Todos os métodos aceitam um dado de contexto. Isso serve para guardar alguma informação estranha que não está na forma de uma string. Por exemplo, um array que contem algum a string. Implementação deve garantir que eles tratam contextos de dados tanto quanto leniências possíveis. Um valor dado em certo contexto não deve se jogado como uma exceção e nem deve ser levantado por algum tipo de erro no php.
  
Se um objeto de excecao é passado como contexto de dado, isso deve ser dado em uma chave de exception. O Loggin de uma exception é um padrão de projeto que permite implementadores para extrair uma pilha de vestígios das exceções quando o "log" do backend dá o devido suporte a isso. Implementadores devem verificar que a chave "exception" é atualmente uma Exception antes usando isso como tal, bem como isso pode conter alguma string. 

1.4 Classes Helpers e Interfaces

A classe Psr\Log\AbstractLogger permite implementar LoggerInterface muito facilmente através do método genérico log. Os outros oito métodos são encaminhando mensagens de contexto relacionado a isso. 

Similarmente, o uso de Psr\Log\LoggerTrait apenas requer que você implemente genericamente o método log. Observe que desde o tratamento disso não pode ser implementado pela interface, nesse caso você tem que implementar LoggerInterface. 

O Psr\Log\NullLogger é providenciado em conjunto com as interfaces. Isso pode ser usado por usuários com interfaces. Isso pode ser usado por usuários de interfaces que providencia como um fall-back  e um black hole implementado se não há um logger que trás isso através deles. Contudo, o log condicional pode ser melhor abordagem se o contexto do dado criado é expansivo. 

O Ps\Log\LoggerAwareTrait marca o que pode ser usado para implementar a interface equivalente facilmente em uma classe. Isso trás acesso a $this->logger. 

A classe Psr\Log\LogLevel segura os contrastes para os 8 levels do log. 


2 Package (Pacotes)

As interfaces de classes são descritas como boas classes relevantes exception e suítes de testes para verificar sua implementação são providenciados como parte de um pacote psr/log. 

3 Psr\Log\LoggerInterface

<?php

namespace Psr\Log;

/**
 * Describes a logger instance.
 *
 * The message MUST be a string or object implementing __toString().
 *
 * The message MAY contain placeholders in the form: {foo} where foo
 * will be replaced by the context data in key "foo".
 *
 * The context array can contain arbitrary data, the only assumption that
 * can be made by implementors is that if an Exception instance is given
 * to produce a stack trace, it MUST be in a key named "exception".
 *
 * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
 * for the full interface specification.
 */
interface LoggerInterface
{
    /**
     * System is unusable.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function emergency($message, array $context = array());

    /**
     * Action must be taken immediately.
     *
     * Example: Entire website down, database unavailable, etc. This should
     * trigger the SMS alerts and wake you up.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function alert($message, array $context = array());

    /**
     * Critical conditions.
     *
     * Example: Application component unavailable, unexpected exception.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function critical($message, array $context = array());

    /**
     * Runtime errors that do not require immediate action but should typically
     * be logged and monitored.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function error($message, array $context = array());

    /**
     * Exceptional occurrences that are not errors.
     *
     * Example: Use of deprecated APIs, poor use of an API, undesirable things
     * that are not necessarily wrong.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function warning($message, array $context = array());

    /**
     * Normal but significant events.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function notice($message, array $context = array());

    /**
     * Interesting events.
     *
     * Example: User logs in, SQL logs.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function info($message, array $context = array());

    /**
     * Detailed debug information.
     *
     * @param string $message
     * @param array $context
     * @return void
     */
    public function debug($message, array $context = array());

    /**
     * Logs with an arbitrary level.
     *
     * @param mixed $level
     * @param string $message
     * @param array $context
     * @return void
     */
    public function log($level, $message, array $context = array());


4. Psr\Log\LoggerAwareInterface

<?php

namespace Psr\Log;

/**
 * Describes a logger-aware instance.
 */
interface LoggerAwareInterface
{
    /**
     * Sets a logger instance on the object.
     *
     * @param LoggerInterface $logger
     * @return void
     */
    public function setLogger(LoggerInterface $logger);
}


5. Psr\Log\LogLevel

<?php

namespace Psr\Log;

/**
 * Describes log levels.
 */
class LogLevel
{
    const EMERGENCY = 'emergency';
    const ALERT     = 'alert';
    const CRITICAL  = 'critical';
    const ERROR     = 'error';
    const WARNING   = 'warning';
    const NOTICE    = 'notice';
    const INFO      = 'info';
    const DEBUG     = 'debug';
}

